# -*- coding: utf-8 -*-
"""MentalHealth.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CC7X7Zsi4PfRKCDFPS7vBvuwY4JqjK4p
"""

pip install prince

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
from sklearn.preprocessing import LabelEncoder
from yellowbrick.cluster import KElbowVisualizer
from sklearn.metrics import silhouette_score,calinski_harabasz_score,davies_bouldin_score
from prince import MCA

df = pd.read_csv('mental-heath-in-tech-2016_20161114.csv')
data = pd.DataFrame(df)

data = pd.read_csv('mental-heath-in-tech-2016_20161114.csv')

data.head()

data.info()

len(data.columns)

data.describe(include='object')

df.columns

new_columns = {
    'Are you self-employed?': 'Self Employed',
    'How many employees does your company or organization have?': 'Number of employees',
    'Is your employer primarily a tech company/organization?': 'Tech Company',
    'Does your employer provide mental health benefits as part of healthcare coverage?': 'MH Coverage',
    'Do you know the options for mental health care available under your employer-provided coverage?': 'MH Coverage Awareness',
    'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?': 'MH Discussion',
    'Does your employer offer resources to learn more about mental health concerns and options for seeking help?': 'MH Resources Provided',
    'Is your anonymity protected if you choose to take advantage of mental health or substance abuse treatment resources provided by your employer?': 'MH Anonimity',
    'If a mental health issue prompted you to request a medical leave from work, asking for that leave would be:': 'Medical Leave',
    'Do you think that discussing a mental health disorder with your employer would have negative consequences?': 'MH Discuission Neg Impact',
    'Would you feel comfortable discussing a mental health disorder with your coworkers?': 'MH Discuission Coworkers',
    'Would you feel comfortable discussing a mental health disorder with your direct supervisor(s)?': 'MH Discuission Supervisor(s)',
    'Do you feel that your employer takes mental health as seriously as physical health?': 'MH as PH',
    'Have you heard of or observed negative consequences for co-workers who have been open about mental health issues in your workplace?': 'MH Coworker Reveal Neg Impact',
    'Do you feel that being identified as a person with a mental health issue would hurt your career?': 'MH Bad Impact on Career',
    'Do you think that team members/co-workers would view you more negatively if they knew you suffered from a mental health issue?': 'MH Neg View of Coworkers',
    'How willing would you be to share with friends and family that you have a mental illness?': 'MH Sharing Freinds/Family',
    'Have you observed or experienced an unsupportive or badly handled response to a mental health issue in your current or previous workplace?': 'MH Bad Response',
    'Do you have a family history of mental illness?': 'MH Family History',
    'Have you had a mental health disorder in the past?': 'MH Disorder Past',
    'Do you currently have a mental health disorder?': 'Current MH Disorder',
    'Have you been diagnosed with a mental health condition by a medical professional?': 'MH Diagnos Proffesional',
    'Have you ever sought treatment for a mental health issue from a mental health professional?': 'MH Sought Proffes Treat',
    'What is your age?': 'Age',
    'What is your gender?': 'Gender',
    'What country do you live in?': 'Country',
    'What US state or territory do you live in?': 'US State',
    'What country do you work in?': 'Work Country',
    'What US state or territory do you work in?': 'Work US State',
    'Which of the following best describes your work position?': 'Work Position',
    'Do you work remotely?': 'Remote',
    'Do you think that discussing a physical health issue with your employer would have negative consequences?': 'PH Discuission Neg Impact',
    'Do you have previous employers?': 'Prev Employers',
    'Have your previous employers provided mental health benefits?': 'Prev MH Benefits',
    'Were you aware of the options for mental health care provided by yorevious employers?ur p': 'MH Awarness Prev',
    'Did your previous employers ever formally discuss mental health (as part of a wellness campaign or other official communication)?': 'Prev MH Discussion',
    'Did your previous employers provide resources to learn more about mental health issues and how to seek help?': 'Prev MH Resources Provided',
    'Was your anonymity protected if you chose to take advantage of mental health or substance abuse treatment resources with previous employers?': 'Prev MH Anonimity',
    'Do you think that discussing a mental health disorder with previous employers would have negative consequences?': 'Prev MH Discuission Neg Impact',
    'Do you think that discussing a physical health issue with previous employers would have negative consequences?': 'Prev PH Discuission Neg Impact',
    'Would you have been willing to discuss a mental health issue with your previous co-workers?': 'Prev MH Discuission Coworkers',
    'Would you have been willing to discuss a mental health issue with your direct supervisor(s)?': 'Prev MH Discuission Supervisor(s)',
    'Did you feel that your previous employers took mental health as seriously as physical health?': 'Prev MH as PH',
    'Did you hear of or observe negative consequences for co-workers with mental health issues in your previous workplaces?': 'Prev MH Coworker Reveal Neg Impact',
    'Would you be willing to bring up a physical health issue with a potential employer in an interview?': 'PH in Interview',
    'Why or why not?': 'Why/why not',
    'Would you bring up a mental health issue with a potential employer in an interview?': 'MH in Interview',
    'Why or why not?.1': 'Why/why not (1)',
    'Have your observations of how another individual who discussed a mental health disorder made you less likely to reveal a mental health issue yourself in your current workplace?': 'Less Reveal MH after observation',
    'If you have a mental health issue, do you feel that it interferes with your work when being treated effectively?': 'MH Effective Treatment',
    'If you have a mental health issue, do you feel that it interferes with your work when NOT being treated effectively?': 'MH NOT Effective Treatment', 'Is your primary role within your company related to tech/IT?': 'Tech Domain'
}

data.rename(columns=new_columns,inplace=True)

data

data.isna().sum()

"""#Deleting every column with more than 550 missing values"""

data.drop(data.columns[list(data.isna().sum() >= 550)],axis=1,inplace=True)

data.isna().sum()

imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')
imputer.fit(data)
cleaned_data = imputer.transform(data)
cleaned_df = pd.DataFrame(data=cleaned_data,columns=data.columns)

"""#Gender Handeling"""

male = ['Male', 'male', 'Male ', 'M', 'm', 'man', 'Cis male', 'Male.', 'male 9:1 female, roughly', 'Male (cis)', 'Man', 'Sex is male',
       'cis male', 'Malr', 'Dude', 'mail', 'M|', 'Male/genderqueer', 'male ', 'Cis Male', 'cisdude', 'cis man', 'MALE',
       "I'm a man why didn't you make this a drop down question. You should of asked sex? And I would of answered yes please. Seriously how much text can this take? "]
female = ['Female', 'female', 'female ',  'F', 'Woman', 'fm', 'f', 'Cis female ', 'Transitioned, M2F', ' Female', 'Cis-woman', 'AFAB',
          'Genderfluid (born female)',  'Female ', 'woman', 'female/woman', 'Cisgender Female', 'fem', 'female-bodied; no feelings about gender',
          'Female (props for making this a freeform field, though)', 'I identify as female.', 'Female assigned at birth ', 'Female or Multi-Gender Femme']
other = ['non-binary', 'Agender', 'Nonbinary', 'Queer', 'nb masculine', 'mtf', 'human', 'genderqueer woman', 'genderqueer', 'Unicorn',
         'Transgender woman', 'Bigender', 'Enby', 'Other', 'Other/Transfeminine', 'Human', 'Genderqueer', 'Genderflux demi-girl', 'Genderfluid',
         'Fluid', 'Enby Bigender', 'Androgynous', 'none of your business', 'Male (trans, FtM)']

cleaned_df['Gender'].replace(to_replace=male,value='Male',inplace=True)
cleaned_df['Gender'].replace(to_replace=female,value='Female',inplace=True)
cleaned_df['Gender'].replace(to_replace=other,value='other',inplace=True)

cleaned_df['Gender']

cleaned_df['Age']

replace = cleaned_df[(data['Age'] < 18 ) | (cleaned_df['Age']>75)]['Age'].tolist()
value = round(cleaned_df[(cleaned_df['Age'] >= 18) | (cleaned_df['Age'] <= 75)]['Age'].mean())
cleaned_df['Age'].replace(to_replace=replace,value=value,inplace=True)

cleaned_df['Age'].unique()

ages = cleaned_df['Age'].unique()
groups = {
    'Before 20': list(range(17,20)),
    '20+': list(range(20,30)),
    '30+': list(range(30,40)),
    '40+': list(range(40,50)),
    'Above 50': list(range(50,75))
}
for age in list(ages):
  for key,values in groups.items():
    for value in values:
      if value == age:
        cleaned_df['Age'].replace(age,value=key,inplace=True)

cleaned_df['Age'].value_counts()

cleaned_df['Country'].value_counts()

other_countries = ['Sweden',
'France',
'Ireland',
'Switzerland',
'Brazil',
'New Zealand',
'India',
'Russia',
'Bulgaria',
'Finland',
'Denmark',
'Italy',
'Belgium',
'South Africa',
'Romania',
'Spain',
'Austria',
'Norway',
'Pakistan'	,
'Chile',
'Czech Republic',
'Japan',
'Israel'	,
'Other',
'Bosnia and Herzegovina',
'Afghanistan'	,
'Estonia',
'Mexico',
'Colombia',
'Lithuania',
'Algeria',
'Serbia',
'Taiwan',
'Guatemala',
'China',
'Venezuela',
'Ecuador',
'Hungary',
'Bangladesh'	,
'Iran'	,
'Argentina',
'Brunei'	,
'Vietnam',
'Greece',
'Slovakia',
'Costa Rica',
'Poland'
]

other_countries

cleaned_df['Country'].replace(to_replace=other_countries,value='Other',inplace=True)

cleaned_df['Country'].value_counts()

cleaned_df.columns

negative_impact_conditions = ["depend", "support", "same", "bad", "deter", "relate", "qualif",
                              "underst", "hurt", 'chance', "crazy", "doubt",  "weak", "product", "liability",
                              "nothing", "allude", "reject", "respect", "eliminat", "pass", "leave", "filter", "expect",
                              "complain"]

discrimination_conditions = ["stigma", "discrimination", "cost", "serious", "IQ", "believe", "disqualify", "discount", "prejudice",
                             "taboo", "judge", "fear", "disability", "unstable", "unreliable"]

privacy_conditions = ["personal", "priva", "accommodation", "situation", "trust", "problem", "shar", "sensitive", "never",
                      "feel", "business", "reflect", "embarass", "obligat", "concern", "condition"]

uncertainty_conditions = ["reaction", "recept", "sure", "issue", "offer", "know", "neg", "afraid", "refus",
                          "necessary", "vulnerable", "stupid", "crap"]

job_performance_conditions = ["map", "bias", "impact", "compromise", "uncomfortable", "relate", "job", "against",
                              "sign", "discuss", "ffect", "no"]

legal_conditions = ["manageable", "suicide", "dismis", "depression", "anxiety", "ocd", "burn", "consider"]

transparency_conditions = ["support", "relevant", "reaction", "prompt", "doubt", "perceive", "risk", "accept", "honest",
                          "perception", "option", "important", "open", "protect"]

lack_of_benefit_conditions = ["appl", "above", "part", "topical", "stance", "aware","roadblock", "won't", "harm",
                              "position", "benef", "previous", "physical", "potential", "as", "see", "disclos"]

categories = {
    "Negative Impact on Hiring Chances": negative_impact_conditions,
    "Fear of Discrimination or Prejudice": discrimination_conditions,
    "Privacy and Personal Concerns": privacy_conditions,
    "Uncertainty about Employer Reaction": uncertainty_conditions,
    "Concerns about Job Performance or Suitability": job_performance_conditions,
    "Legal and Rights Considerations": legal_conditions,
    "Desire for Transparency and Alignment": transparency_conditions,
    "Lack of Benefit in Disclosing": lack_of_benefit_conditions
}

responses = cleaned_df['Why/why not (1)'].unique()

for response in responses:
  for word in response.lower().split():
    for key, values in categories.items():
      if any(value in word for value in values):
        cleaned_df['Why/why not (1)'].replace(response, value=key,inplace=True)
        break

for response in responses:
  for key, values in categories.items():
    if key != response:
      cleaned_df['Why/why not (1)'].replace(response, value="Other",inplace = True)

cleaned_df['Why/why not (1)'].unique()

responses = cleaned_df['Why/why not'].unique()

for response in responses:
  for word in response.lower().split():
    for key, values in categories.items():
      if any(value in word for value in values):
        cleaned_df['Why/why not'].replace(response, value=key,inplace=True)
        break

for response in responses:
  for key, values in categories.items():
    if key != response:
      cleaned_df['Why/why not'].replace(response, value="Other",inplace = True)

cleaned_df['Why/why not'].unique()

roles = {
    "IT Development": ["Back", "Developer", "Front"],
    "Management": ["Supervisor","Team", "Lead", "Leadership"],
    "DevOps": ["DevOps", "SysAdmin"],
    "Advocacy": ["Evangelist", "Advocate"],
    "Support": ["Support"],
    "Design": ["Design"],
    "Sales": ["Sales"],
    "Other": ["Other"],
    "One-person shop":["One","person", "shop"],
  "HR":['HR']
}


categories_2 = cleaned_df['Work Position'].unique()
for role in categories_2:
  for word in role.lower().split():
    for key, values in roles.items():
      if any(value.lower() in word for value in values):
        cleaned_df['Work Position'].replace(role,value=key,inplace=True)
        break

cleaned_df['Work Position'].unique()

cleaned_df.shape

"""##Visualization

"""

plt.figure(figsize=(20,5))
plt.subplot(1,2,1)
ax = sns.countplot(x = cleaned_df['Country'], hue= cleaned_df['Gender'],)
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
ax.bar_label(ax.containers[2])
plt.ylabel("Number of People")
plt.legend(['Male','Female','other'])
gender_labels = ['Male','Female','other']
values = cleaned_df['Gender'].value_counts()
sizes = [values[0],values[1],values[2]]

plt.subplot(1,2,2)
plt.pie(sizes,labels=gender_labels,startangle=150,pctdistance=0.85)

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
ax = sns.countplot(x = cleaned_df['Number of employees'],hue = cleaned_df['Tech Company'], order = ['1-5','6-25','26-100','100-500','500-1000','More than 1000'])
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title('Number of People by Company')
plt.xlabel("Company Size")
plt.ylabel("Number of Employees")
plt.legend(['Not Tech', 'tech'])

le  = LabelEncoder()

for column in cleaned_df.columns:
  if cleaned_df[column].dtype == 'object':
    cleaned_df[column] = le.fit_transform(cleaned_df[column].astype(str))

plt.figure(figsize=(10,10))
cor = np.triu(np.ones_like(cleaned_df.corr(),dtype=bool))
sns.heatmap(cleaned_df.corr())

corr_matrix = cleaned_df.corr()
threshold = 0.8

for i in range(len(corr_matrix.columns)):
  for j in range(i):
    if abs(corr_matrix.iloc[i ,j]) > threshold:
      cleaned_df.drop(columns=[corr_matrix.columns[i], corr_matrix.columns[j]],inplace=True)

"""#Dimentionality reduction and clustering"""

mca = MCA(n_components=85,n_iter=50)
mca_components=mca.fit(cleaned_df)

mca_components.eigenvalues_summary

mca_coordinates = mca.transform(cleaned_df)
mca_coordinates

model = KMeans(init='k-means++')

visualizer = KElbowVisualizer(model,timings=False)
plt.figure(figsize=(10,10))
visualizer.fit(mca_coordinates)
visualizer.show()

clusters = 4

kmeans = KMeans(n_clusters=clusters)
clustering = kmeans.fit_predict(mca_coordinates)

centers = kmeans.cluster_centers_

labels = kmeans.labels_

characteristics = []
sizes = []

for i in range(clusters):
  cluster_data = mca_coordinates[labels == i]
  cluster_size = len(cluster_data)
  cluster_center = centers[i]
  sizes.append(cluster_size)

cl_labels = [f'Cluster {i + 1}' for i in range(clusters)]

def func(val):
  a = np.round(val / 100.*sum(sizes))
  return f'{round(val ,1 )} % ({a})'

plt.figure(figsize=(10,10))
plt.pie(sizes,labels = cl_labels)

tsne = TSNE()
projections = tsne.fit_transform(mca_coordinates)


plt.figure(figsize=(10,10))
for i in range(clusters):
  plt.scatter(projections[labels == i][:, 0], projections[labels == i][:, 1], label = f'Cluster {i + 1}')
plt.xlabel('Component 1')
plt.ylabel('Component 2')
plt.legend()

cleaned_df['Cluster'] = labels

def cluster_profiling(data):
  profile = {}
  for columns_name in data.columns:
    if columns_name != 'Cluster':
      profile[f'{columns_name}'] = data[columns_name].value_counts().keys()[0]

  return profile

profiles = cleaned_df.groupby('Cluster').apply(cluster_profiling)
profiles_df = pd.DataFrame(profiles.tolist(),index=profiles.index)

profiles_df

profiles_df.to_csv('Final.csv')

